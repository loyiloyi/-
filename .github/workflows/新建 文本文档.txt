void OneNet_RevPro(unsigned char *cmd)
{
	
	MQTT_PACKET_STRUCTURE mqttPacket = {NULL, 0, 0, 0};								//协议包
	
	char *req_payload = NULL;
	char *cmdid_topic = NULL;
	
	
	unsigned short topic_len = 0;
	unsigned short req_len = 0;
	
	unsigned char type = 0;
	unsigned char qos = 0;
	static unsigned short pkt_id = 0;

	
	short result = 0;

	char *dataPtr = NULL;
	char numBuf[10];
	int num = 0;
	
	cJSON* cjson;
	int value;
	
	char tishi2[12]="###value";
	
	type = MQTT_UnPacketRecv(cmd);
	switch(type)
	{
		case MQTT_PKT_CMD:															//命令下发
			
			result = MQTT_UnPacketCmd(cmd, &cmdid_topic, &req_payload, &req_len);	//解出topic和消息体
			if(result == 0)
			{
				UsartPrintf(USART_DEBUG, "cmdid: %s, req: %s, req_len: %d\r\n", cmdid_topic, req_payload, req_len);
				
				if(MQTT_PacketCmdResp(cmdid_topic, req_payload, &mqttPacket) == 0)	//命令回复组包
				{
					UsartPrintf(USART_DEBUG, "Tips:	Send CmdResp\r\n");
					
					ESP8266_SendData(mqttPacket._data, mqttPacket._len);			//回复命令
					MQTT_DeleteBuffer(&mqttPacket);									//删包
				}
			}
		
		break;
			
		case MQTT_PKT_PUBLISH:														//接收的Publish消息
		
			result = MQTT_UnPacketPublish(cmd, &cmdid_topic, &topic_len, &req_payload, &req_len, &qos, &pkt_id);
			if(result == 0)
			{
				UsartPrintf(USART_DEBUG, "topic: %s, topic_len: %d, payload: %s, payload_len: %d\r\n",
																	cmdid_topic, topic_len, req_payload, req_len);
				//JSON字符串到cJSON格式
				cjson = cJSON_Parse(req_payload); 
				//判断cJSON_Parse函数返回值确定是否打包成功
				if(cjson == NULL){
					UsartPrintf(USART_DEBUG, "json pack into cjson error...\r\n");
					//printf("json pack into cjson error...");
				}
				else{
					//获取字段值
					//cJSON_GetObjectltem返回的是一个cJSON结构体，所以我们可以通过函数返回结构体的方式选择返回类型
					value = cJSON_GetObjectItem(cjson,"LED")->valueint;
					switch(15-value)
					{
						case 0:		COL = 0; HOT = 0; SHI = 0; FAN = 0; break;		//取反 COL = 亮; HOT = 亮; SHI = 亮; FAN = 亮; break; //0
						case 1:		COL = 0; HOT = 0; SHI = 0; FAN = 1; break;		//取反 COL = 亮; HOT = 亮; SHI = 亮; FAN = 灭; break; //1
						case 2:		COL = 0; HOT = 0; SHI = 1; FAN = 0; break;		//取反 COL = 亮; HOT = 亮; SHI = 灭; FAN = 亮; break; //2
						case 3:		COL = 0; HOT = 0; SHI = 1; FAN = 1; break;		//取反 COL = 亮; HOT = 亮; SHI = 灭; FAN = 灭; break; //3
						
						case 4:		COL = 0; HOT = 1; SHI = 0; FAN = 0; break;		//取反 COL = 亮; HOT = 灭; SHI = 亮; FAN = 亮; break; //4
						case 5:		COL = 0; HOT = 1; SHI = 0; FAN = 1; break;		//取反 COL = 亮; HOT = 灭; SHI = 亮; FAN = 灭; break; //5
						case 6:		COL = 0; HOT = 1; SHI = 1; FAN = 0; break;		//取反 COL = 亮; HOT = 灭; SHI = 灭; FAN = 亮; break; //6
						case 7:		COL = 0; HOT = 1; SHI = 1; FAN = 1; break;		//取反 COL = 亮; HOT = 灭; SHI = 灭; FAN = 灭; break; //7
						
						case 8:		COL = 1; HOT = 0; SHI = 0; FAN = 0; break;		//取反 COL = 灭; HOT = 亮; SHI = 亮; FAN = 亮; break; //8
						case 9:		COL = 1; HOT = 0; SHI = 0; FAN = 1; break;		//取反 COL = 灭; HOT = 亮; SHI = 亮; FAN = 灭; break; //9
						case 10:	COL = 1; HOT = 0; SHI = 1; FAN = 0; break;		//取反 COL = 灭; HOT = 亮; SHI = 灭; FAN = 亮; break; //10
						case 11:	COL = 1; HOT = 0; SHI = 1; FAN = 1; break;		//取反 COL = 灭; HOT = 亮; SHI = 灭; FAN = 灭? break; //11
						
						case 12:	COL = 1; HOT = 1; SHI = 0; FAN = 0; break;		//取反 COL = 灭; HOT = 灭; SHI = 亮; FAN = 亮; break; //12
						case 13:	COL = 1; HOT = 1; SHI = 0; FAN = 1; break;		//取反 COL = 灭; HOT = 灭; SHI = 亮; FAN = 灭; break; //13
						case 14:	COL = 1; HOT = 1; SHI = 1; FAN = 0; break;		//取反 COL = 灭; HOT = 灭; SHI = 灭; FAN = 亮; break; //14
						case 15:	COL = 1; HOT = 1; SHI = 1; FAN = 1; break;		//取反 COL = 灭; HOT = 灭; SHI = 灭; FAN = 灭; break; //15
						
					}
				}

				//delete cjson
				cJSON_Delete(cjson);
				

				switch(qos)
				{
					case 1:															//收到publish的qos为1，设备需要回复Ack
					
						if(MQTT_PacketPublishAck(pkt_id, &mqttPacket) == 0)
						{
							UsartPrintf(USART_DEBUG, "Tips:	Send PublishAck\r\n");
							ESP8266_SendData(mqttPacket._data, mqttPacket._len);
							MQTT_DeleteBuffer(&mqttPacket);
						}
					break;
					
					case 2:															//收到publish的qos为2，设备先回复Rec
																					//平台回复Rel，设备再回复Comp
						if(MQTT_PacketPublishRec(pkt_id, &mqttPacket) == 0)
						{
							UsartPrintf(USART_DEBUG, "Tips:	Send PublishRec\r\n");
							ESP8266_SendData(mqttPacket._data, mqttPacket._len);
							MQTT_DeleteBuffer(&mqttPacket);
						}
	
					break;
					
					default:
						break;
				}
			}
		
		break;	
			
			
		case MQTT_PKT_PUBACK:														//发送Publish消息，平台回复的Ack
		
			if(MQTT_UnPacketPublishAck(cmd) == 0)
				UsartPrintf(USART_DEBUG, "Tips:	MQTT Publish Send OK\r\n");
			
		break;
		
		default:
			result = -1;
		break;
	}
	
	ESP8266_Clear();									//清空缓存
	
	if(result == -1)
		return;
	
	dataPtr = strchr(req_payload, '}');					//搜索'}'

	if(dataPtr != NULL && result != -1)					//如果找到了
	{
		dataPtr++;
		
		while(*dataPtr >= '0' && *dataPtr <= '9')		//判断是否是下发的命令控制数据
		{
			numBuf[num++] = *dataPtr++;
		}
		numBuf[num] = 0;
		
		num = atoi((const char *)numBuf);				//转为数值形式
	}

	if(type == MQTT_PKT_CMD || type == MQTT_PKT_PUBLISH)
	{
		MQTT_FreeBuffer(cmdid_topic);
		MQTT_FreeBuffer(req_payload);
	}

}
